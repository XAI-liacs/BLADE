from . import HexagonPacking, RectanglePacking, UnitSquarePacking

# Hexagonal Packing.
best_hex_packing_11 = [
    [7.227468518248726, 1.406189555916512, 64.96835531696001],
    [9.108934177226912, 6.282338181661271, 82.7839419155727],
    [9.953071339809288, 4.757920599499527, 22.75943751294596],
    [9.119104027817858, 1.3635244317245632, 64.98416780884727],
    [8.202877059101247, 4.72907294863739, 22.702381798755646],
    [7.272127593730819, 3.260296487997907, 202.68420631619662],
    [9.055201371937533, 3.2081226414835964, 82.70304387527644],
    [11.605104986630607, 3.9103231530709373, 120.97244798016398],
    [10.63107376404371, 2.224090366073967, 244.99786687183936],
    [6.427221005557855, 4.784445729508918, 262.6855070070916],
    [7.357815645136251, 6.25309652428302, 22.7012724369423],
]

best_hex_packing_12 = [
    [-4.189650776376798, 1.8191996226926388, 27.083656548467786],
    [-4.1762891342159225, 7.064090887028092, 267.1521094125118],
    [-2.742942219672671, 3.9055564132509595, 27.098852933212644],
    [-6.194948523724643, 4.243623380441444, 87.15308054130165],
    [-2.4735773559547236, 6.43056712077689, 27.144807633484653],
    [-3.8735033091694633, 5.272827562035259, 207.12012595575163],
    [-1.040517842157661, 3.2724339122261963, 147.11193087313353],
    [-1.3431542020437193, 5.063486444235776, 27.124004797633685],
    [-5.89197412464008, 2.452466762507662, 207.10748153590382],
    [-4.492206360794807, 3.610020660157929, 327.09918513988094],
    [-2.4402287984241076, 2.1146830723057635, 147.1073847274004],
    [-5.576327284388157, 5.906127413424367, 207.16788311720808],
]

# Unit Square Packing
best_unit_square_packing_26 = [
    (0.68180423, 0.90401948, 0.09598051040194801),
    (0.90598057, 0.49972596, 0.094019420598057),
    (0.08464495, 0.08464502, 0.084644941535505),
    (0.4818405, 0.1034156, 0.10341558965844),
    (0.48234279, 0.89652324, 0.10347674965232401),
    (0.88928295, 0.11071646, 0.11071644892835401),
    (0.07852351, 0.50033803, 0.07852350214764901),
    (0.27330428, 0.1051224, 0.10512238948776001),
    (0.38153556, 0.70211016, 0.115517618448237),
    (0.13252625, 0.70386646, 0.132047406795258),
    (0.59610341, 0.72720176, 0.10051153994884501),
    (0.59576502, 0.2725969, 0.10054788994521),
    (0.88902242, 0.88902318, 0.11097680890231801),
    (0.68087256, 0.09573004, 0.095730030426996),
    (0.53098174, 0.49996661, 0.13587084641291403),
    (0.90742967, 0.68631006, 0.09257029074297),
    (0.74197859, 0.40386139, 0.095943250405674),
    (0.08471273, 0.91528735, 0.08471263152873601),
    (0.76300349, 0.7598366, 0.069494603050539),
    (0.27358888, 0.89472069, 0.105279299472069),
    (0.13242993, 0.29639184, 0.132426596757339),
    (0.90745313, 0.31316575, 0.092546580745341),
    (0.76284098, 0.23948486, 0.06975189302481001),
    (0.38095848, 0.29797266, 0.115741008425898),
    (0.74207757, 0.59573774, 0.09593309040669),
    (0.27141024, 0.50032568, 0.114361818563817),
]

best_unit_square_packing_32 = [
    (0.09076163, 0.40381803, 0.090761620923837),
    (0.07310993, 0.92689178, 0.07310821268917801),
    (0.08745017, 0.22570576, 0.087381421261857),
    (0.24855246, 0.30880277, 0.093428060657193),
    (0.4079865, 0.06300614, 0.063006133699386),
    (0.47646318, 0.90136179, 0.09863820013617901),
    (0.89604966, 0.10309934, 0.10309932969006601),
    (0.9066386, 0.68096117, 0.09336139066386),
    (0.08962002, 0.76509474, 0.0895289910471),
    (0.06973669, 0.06965159, 0.06965158303484101),
    (0.40979823, 0.21756451, 0.09156283084371601),
    (0.25742466, 0.88393887, 0.11606111839388701),
    (0.09064689, 0.58506214, 0.090482500951749),
    (0.90294698, 0.30231577, 0.09623644037635501),
    (0.57265603, 0.10585396, 0.105853949414604),
    (0.74007588, 0.40129314, 0.09435083056491601),
    (0.57539962, 0.71183255, 0.115160168483982),
    (0.7367635, 0.21592191, 0.09104997089500201),
    (0.41096972, 0.40263617, 0.093512520648747),
    (0.88664452, 0.88667032, 0.113317128668286),
    (0.57582722, 0.49961748, 0.09705531029446801),
    (0.24962585, 0.49417195, 0.09194421080557799),
    (0.90546338, 0.49309632, 0.094507120549287),
    (0.67381348, 0.90149423, 0.09850576014942301),
    (0.24310147, 0.1077195, 0.10771948922805),
    (0.40815297, 0.5886157, 0.09248833075116601),
    (0.24737889, 0.6771266, 0.090994980900501),
    (0.75801377, 0.7532924, 0.07192969280703),
    (0.73526642, 0.06243992, 0.062439303756069),
    (0.57415412, 0.30715219, 0.095403150459684),
    (0.39239379, 0.75259664, 0.07223814277618501),
    (0.7439361, 0.58879735, 0.093166630683336),
]

# Rectangle 2(l + b) = 4, packing.
best_rectangle_packing_4 = [
    (0.12396161, 0.12396161, 0.12396159760383901),
    (0.0747415, 0.31647214, 0.07474149252585001),
    (0.12740019, 0.51163445, 0.127400177259981),
    (0.0747415, 0.70679675, 0.07474149252585001),
    (0.12396161, 0.89930729, 0.12396159760383901),
    (0.36284141, 0.11508312, 0.115083108491688),
    (0.25916864, 0.31452627, 0.10969588903041),
    (0.37244262, 0.51163445, 0.117642228235776),
    (0.25916864, 0.70874263, 0.10969588903041),
    (0.3628414, 0.90818577, 0.11508311849168701),
    (0.59083599, 0.11292169, 0.11292167870783101),
    (0.48083152, 0.30914434, 0.112032298796769),
    (0.62891008, 0.51163445, 0.138825206117478),
    (0.48083152, 0.71412455, 0.112032298796769),
    (0.59083598, 0.9103472, 0.11292168870783001),
    (0.67852787, 0.2919303, 0.086412051358794),
    (0.85766825, 0.39257159, 0.11906284809371401),
    (0.85766825, 0.6306973, 0.11906284809371401),
    (0.67852787, 0.73133859, 0.086412051358794),
    (0.83965981, 0.8861976, 0.13707128629287002),
    (0.83965981, 0.1370713, 0.13707128629287002),
]


def get_hexagon_packing_problems(get_best: bool) -> list[HexagonPacking]:
    """
    `get_x_problems` returns the whole set of said benchmark category. Here it returns Hexagon Packing benchamarks, as an array.

    Args:
        get_best: Try and initialise search algorithm with best known results.

    Returns:
        An array of benchmark objects as follows:
            array[0] = Hexagon Packing benchmark instance with 11 inner hexagons.
            array[1] = Hexagon Packing benchmark instance with 12 inner hexagons.
    """
    if get_best:
        hp1 = HexagonPacking(
            n_hex=11, best_known=3.931, best_solution=best_hex_packing_11
        )
        hp2 = HexagonPacking(
            n_hex=12, best_known=3.942, best_solution=best_hex_packing_12
        )
        return [hp1, hp2]
    hp1 = HexagonPacking(n_hex=11, best_known=3.931)
    hp2 = HexagonPacking(n_hex=12, best_known=3.942)

    return [hp1, hp2]


def get_rectangle_packing_problems(get_best: bool) -> list[RectanglePacking]:
    """
    `get_x_problems` returns the whole set of said benchmark category. Here it returns Rectangle Packing benchamarks, as an array.

    Args:
        get_best: Try and initialise search algorithm with best known results.

    Returns:
        An array of benchmark objects as follows:
            array[0] = Rectangle Packing benchmark with rectangle perimeter = 4, packing 21 circles.
    """
    if get_best:
        rp1 = RectanglePacking(best_solution=best_rectangle_packing_4)
    else:
        rp1 = RectanglePacking()
    return [rp1]


def get_square_packing_problems(get_best: bool) -> list[UnitSquarePacking]:
    """
    `get_x_problems` returns the whole set of said benchmark category. Here it returns Unit Square Packing benchamarks, as an array.

    Args:
        get_best: Try and initialise search algorithm with best known results.

    Returns:
        An array of benchmark objects as follows:
            array[0] = Unit Square Packing benchmark for Unit Square, packing 26 circles.
            array[1] = Unit Square Packing benchmark for Unit Square, packing 32 circles.
    """
    if get_best:
        rp1 = UnitSquarePacking(
            n_circles=26, best_known=2.635, best_solution=best_unit_square_packing_26
        )
        rp2 = UnitSquarePacking(
            n_circles=32, best_known=2.937, best_solution=best_unit_square_packing_32
        )
    else:
        rp1 = UnitSquarePacking(n_circles=26, best_known=2.635)
        rp2 = UnitSquarePacking(n_circles=32, best_known=2.937)

    return [rp1, rp2]
